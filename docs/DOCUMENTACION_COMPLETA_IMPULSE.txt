# 📋 **IMPULSE - Documentación Técnica Completa**

## **🎯 Resumen Ejecutivo**

**IMPULSE** es una aplicación web full-stack de **gamificación de hábitos y gestión de retos personales**. Permite a los usuarios crear retos, reportar progreso con evidencias multimedia, y contar con un sistema de validación por pares. La arquitectura está diseñada para escalabilidad, accesibilidad y experiencia de usuario moderna.

---

## **🏗️ Arquitectura del Sistema**

### **Stack Tecnológico**

| Componente | Tecnología | Versión | Justificación |
|------------|------------|---------|---------------|
| **Frontend** | React + TypeScript | 19.1.1 | SPA moderna, type-safe, componentes reutilizables |
| **Backend** | Spring Boot + Java | 3.5.4 / Java 21 | Microservicios, seguridad robusta, ecosistema maduro |
| **Base de Datos** | MySQL | 5.5.5+ | Relacional, transaccional, amplio soporte |
| **Build Tool** | Maven (Backend) + CRA | 3.9+ / 5.0.1 | Gestión de dependencias estándar |
| **Autenticación** | JWT + Spring Security | - | Stateless, escalable, estándar industria |

### **Arquitectura de 3 Capas**

```
┌─────────────────────────────────────────────┐
│                FRONTEND                     │
│  React 19 + TypeScript + CSS Variables     │
│  ├── Pages (14 rutas principales)          │
│  ├── Components reutilizables              │
│  ├── Hooks personalizados                  │
│  └── Context API (estado global)           │
└─────────────────────────────────────────────┘
                    ↕ HTTP REST
┌─────────────────────────────────────────────┐
│                BACKEND                      │
│     Spring Boot + Security + JPA           │
│  ├── Controllers REST                      │
│  ├── Services (lógica de negocio)          │
│  ├── Repositories (acceso a datos)         │
│  ├── Security (JWT + RBAC)                 │
│  └── Configuration & Filters               │
└─────────────────────────────────────────────┘
                    ↕ JDBC
┌─────────────────────────────────────────────┐
│              BASE DE DATOS                  │
│              MySQL 5.5.5+                  │
│  ├── Esquema normalizado (9 tablas)        │
│  ├── Stored Procedures                     │
│  ├── Triggers de auditoría                 │
│  └── Migraciones Flyway                    │
└─────────────────────────────────────────────┘
```

---

## **📁 Estructura del Proyecto**

```
Impulse/
├── frontend/                    # React App (puerto 3000)
│   ├── src/
│   │   ├── pages/              # 14 páginas principales
│   │   │   ├── Home.tsx        # Landing page
│   │   │   ├── Login.tsx       # Autenticación
│   │   │   ├── Dashboard.tsx   # Panel principal
│   │   │   ├── MisRetos.tsx    # Gestión de retos
│   │   │   ├── Validaciones.tsx # Validar evidencias
│   │   │   └── [9 más...]
│   │   ├── components/         # Componentes reutilizables
│   │   │   ├── Header.tsx      # Navegación
│   │   │   ├── Modal.tsx       # Dialogs
│   │   │   ├── Button.tsx      # Botones unificados
│   │   │   └── [6 más...]
│   │   ├── contexts/           # Estado global
│   │   │   └── AppContext.tsx  # Context API principal
│   │   ├── hooks/              # Lógica reutilizable
│   │   │   ├── useAuth.ts      # Autenticación
│   │   │   └── useReto.ts      # Gestión de retos
│   │   ├── services/           # API calls
│   │   │   └── authService.ts  # HTTP client
│   │   ├── assets/             # Recursos estáticos
│   │   │   └── styles.css      # Sistema de diseño (1400+ líneas)
│   │   └── i18n/               # Internacionalización
│   │       ├── es.json         # Español
│   │       └── en.json         # Inglés
│   ├── package.json            # Dependencias + overrides
│   └── public/                 # Assets públicos
│
├── backend/                     # Spring Boot (puerto 8080)
│   ├── src/main/java/com/impulse/
│   │   ├── application/        # Capa de aplicación
│   │   │   ├── reto/          # Dominio: Retos
│   │   │   ├── usuario/       # Dominio: Usuarios
│   │   │   ├── evidencia/     # Dominio: Evidencias
│   │   │   └── gamificacion/  # Dominio: Puntos/Logros
│   │   ├── infrastructure/    # Capa de infraestructura
│   │   │   ├── repository/    # JPA Repositories
│   │   │   ├── notificacion/  # Telegram/WhatsApp
│   │   │   └── config/        # Configuraciones
│   │   ├── common/            # Código compartido
│   │   │   ├── security/      # JWT + RBAC + Filters
│   │   │   └── exception/     # Manejo de errores
│   │   └── ImpulseApplication.java # Main class
│   ├── src/main/resources/
│   │   ├── application*.yml   # Configuraciones por entorno
│   │   ├── messages*.properties # i18n backend
│   │   └── db/migration/      # Scripts SQL Flyway
│   ├── pom.xml                # Maven dependencies
│   └── target/                # Compilados
│
├── db/                         # Scripts de base de datos
│   ├── setup_database.sql     # Creación inicial
│   ├── migrations/            # Versionado de esquema
│   │   ├── V1__init_schema.sql
│   │   └── V2__reto_table.sql
│   ├── procedures/            # Stored procedures
│   └── erd/                   # Diagramas ERD
│
└── docs/                      # Documentación
    └── arquitectura/          # Diagramas y specs
```

---

## **🗄️ Modelo de Datos**

### **Entidades Principales (9 tablas)**

```sql
-- USUARIOS Y AUTENTICACIÓN
├── usuarios
│   ├── id (PK)
│   ├── email (UNIQUE)
│   ├── password_hash
│   ├── nombre, apellido
│   ├── rol: ['USER', 'VALIDADOR', 'ADMIN']
│   ├── estado: ['ACTIVO', 'INACTIVO', 'SUSPENDIDO']
│   └── created_at, updated_at

-- GAMIFICACIÓN
├── gamificacion
│   ├── usuario_id (FK)
│   ├── puntos_totales
│   ├── nivel
│   ├── logros_desbloqueados
│   └── racha_actual

-- RETOS
├── retos
│   ├── id (PK)
│   ├── usuario_id (FK → usuarios.id)
│   ├── titulo, descripcion
│   ├── categoria: ['PERSONAL', 'PROFESIONAL', 'SALUD', 'EDUCACION']
│   ├── dificultad: ['FACIL', 'MEDIO', 'DIFICIL', 'EXTREMO']
│   ├── estado: ['ACTIVO', 'COMPLETADO', 'PAUSADO', 'CANCELADO']
│   ├── fecha_inicio, fecha_fin
│   ├── progreso (0-100%)
│   └── recompensas (JSON: puntos, logros)

-- EVIDENCIAS Y VALIDACIÓN
├── evidencias
│   ├── id (PK)
│   ├── reto_id (FK → retos.id)
│   ├── usuario_id (FK → usuarios.id)
│   ├── tipo: ['FOTO', 'VIDEO', 'TEXTO']
│   ├── contenido (URL o texto)
│   ├── descripcion
│   ├── estado: ['PENDIENTE', 'APROBADA', 'RECHAZADA']
│   └── fecha_subida

├── validaciones
│   ├── evidencia_id (FK)
│   ├── validador_id (FK → usuarios.id)
│   ├── aprobada (BOOLEAN)
│   ├── comentarios
│   └── fecha_validacion

-- NOTIFICACIONES
├── notificaciones
│   ├── usuario_id (FK)
│   ├── tipo: ['RETO_CREADO', 'EVIDENCIA_VALIDADA', 'LOGRO_DESBLOQUEADO']
│   ├── mensaje
│   ├── leida
│   └── fecha_envio

-- AUDITORÍA
└── auditoria
    ├── tabla_afectada
    ├── accion: ['INSERT', 'UPDATE', 'DELETE']
    ├── usuario_id
    ├── datos_anteriores, datos_nuevos
    └── timestamp
```

### **Relaciones Clave**

- **1:N** Usuario → Retos
- **1:N** Reto → Evidencias  
- **N:M** Evidencia ↔ Validador (tabla: validaciones)
- **1:1** Usuario ↔ Gamificación
- **1:N** Usuario → Notificaciones

---

## **🔐 Sistema de Seguridad**

### **Autenticación JWT**

```java
// Flujo de autenticación
1. POST /api/auth/login { email, password }
2. Backend valida credenciales
3. Genera JWT con claims: { userId, rol, exp }
4. Frontend almacena token en localStorage
5. Todas las requests incluyen: Authorization: Bearer <token>
```

### **Autorización RBAC (Role-Based Access Control)**

| Rol | Permisos |
|-----|----------|
| **USER** | Crear retos, subir evidencias, ver dashboard personal |
| **VALIDADOR** | Todo lo anterior + validar evidencias de otros usuarios |
| **ADMIN** | Todo lo anterior + gestión de usuarios, métricas del sistema |

### **Filtros de Seguridad (Spring Security Chain)**

```java
SecurityFilterChain:
1. DisableEncodeUrlFilter
2. WebAsyncManagerIntegrationFilter  
3. SecurityContextHolderFilter
4. HeaderWriterFilter (CORS, CSP)
5. CorsFilter (frontend ↔ backend)
6. LogoutFilter
7. RBACFilter (custom: autorización por endpoint)
8. JwtAuthenticationFilter (custom: validación JWT)
9. RequestCacheAwareFilter
10. SecurityContextHolderAwareRequestFilter
11. AnonymousAuthenticationFilter
12. SessionManagementFilter (STATELESS)
13. ExceptionTranslationFilter
14. AuthorizationFilter
```

---

## **🚀 APIs y Endpoints**

### **Autenticación** `/api/auth`
```bash
POST /login        # { email, password } → { token, user }
POST /register     # { email, password, nombre } → { user }
POST /logout       # Invalidar token
GET  /me           # Datos usuario actual
```

### **Retos** `/api/retos`
```bash
GET    /           # Lista retos del usuario (paginado)
POST   /           # Crear nuevo reto
GET    /{id}       # Detalle de reto específico
PUT    /{id}       # Actualizar reto
DELETE /{id}       # Eliminar/cancelar reto
GET    /{id}/progreso # Estadísticas de progreso
```

### **Evidencias** `/api/evidencias`
```bash
GET    /reto/{retoId}     # Evidencias de un reto
POST   /                 # Subir nueva evidencia
PUT    /{id}             # Actualizar evidencia
DELETE /{id}             # Eliminar evidencia
POST   /{id}/validar     # Validar evidencia (VALIDADOR+)
```

### **Gamificación** `/api/gamificacion`
```bash
GET    /puntos           # Puntos del usuario
GET    /ranking          # Ranking global
GET    /logros           # Logros disponibles/desbloqueados
POST   /calcular-puntos  # Recalcular puntos (ADMIN)
```

---

## **🎨 Sistema de Diseño Frontend**

### **CSS Architecture**

**1400+ líneas de CSS** organizadas en:

```css
/* Sistema de variables CSS */
:root {
  --color-primary: #667eea;
  --gradient-primary: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  --shadow-lg: 0 8px 24px rgba(102, 126, 234, 0.2);
  --card-bg: rgba(255, 255, 255, 0.9);
  /* 50+ variables más... */
}

/* Componentes base */
.btn { /* Sistema de botones unificado */ }
.content-card { /* Cards glassmorphism */ }
.form-section { /* Formularios consistentes */ }
.stats-grid { /* Layouts de métricas */ }

/* Páginas específicas */
.page-container { /* Layout universal */ }
.internal-header { /* Header páginas internas */ }
.auth-page { /* Páginas de autenticación */ }

/* Responsive design */
@media (max-width: 768px) { /* Mobile-first */ }
```

### **Design System Features**

- **Glassmorphism**: Transparencias y blur effects
- **Gradientes dinámicos**: Colores vibrantes
- **Sombras en capas**: Profundidad visual
- **Grid responsive**: CSS Grid + Flexbox
- **Accesibilidad**: ARIA, focus management, contraste
- **Animaciones suaves**: CSS transitions + transforms

---

## **📱 Páginas y Funcionalidades**

### **Páginas Públicas**
- **Home** (`/`): Landing page, hero section, testimonios
- **Login** (`/login`): Autenticación con diseño moderno
- **Register** (`/register`): Registro de nuevos usuarios

### **Páginas Privadas (requieren autenticación)**
- **Dashboard** (`/dashboard`): Panel principal, estadísticas, retos activos
- **MisRetos** (`/mis-retos`): Gestión completa de retos personales
- **CrearReto** (`/crear-reto`): Formulario de creación de retos
- **RetoDetalle** (`/reto/{id}`): Vista detallada con progreso y evidencias
- **ReportarAvance** (`/reportar-avance`): Subida de evidencias multimedia
- **Perfil** (`/perfil`): Gestión de perfil de usuario
- **Configuracion** (`/configuracion`): Settings y preferencias

### **Páginas de Validación (VALIDADOR+)**
- **Validaciones** (`/validaciones`): Revisar evidencias pendientes
- **Validadores** (`/validadores`): Gestión de validadores

### **Páginas Auxiliares**
- **Onboarding** (`/onboarding`): Tutorial inicial
- **Notificaciones** (`/notificaciones`): Centro de notificaciones

---

## **🔧 Configuración de Desarrollo**

### **Variables de Entorno**

**Backend** (`application-dev.yml`):
```yaml
server:
  port: 8080
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/impulse_dev
    username: ${DB_USER:impulse_user}
    password: ${DB_PASSWORD:impulse_pass}
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: true
security:
  jwt:
    secret: ${JWT_SECRET:dev-secret-key}
    expiration: 86400000  # 24 horas
notificaciones:
  telegram:
    bot-token: ${TELEGRAM_BOT_TOKEN}
  whatsapp:
    api-key: ${WHATSAPP_API_KEY}
```

**Frontend** (`.env`):
```bash
REACT_APP_API_BASE_URL=http://localhost:8080/api
REACT_APP_ENVIRONMENT=development
REACT_APP_VERSION=1.0.0
```

### **Scripts de Desarrollo**

```bash
# Backend
cd backend
mvn spring-boot:run                    # Desarrollo (puerto 8080)
mvn clean package                      # Build para producción
mvn test                              # Tests unitarios

# Frontend  
cd frontend
npm start                             # Desarrollo (puerto 3000)
npm run build                         # Build optimizado
npm test                              # Tests React

# Base de datos
mysql -u root -p < db/setup_database.sql    # Setup inicial
```

---

## **🧪 Testing y Calidad**

### **Testing Strategy**

| Capa | Herramienta | Cobertura |
|------|-------------|-----------|
| **Unit Tests (Backend)** | JUnit 5 + Mockito | Services, Repositories |
| **Integration Tests** | Spring Boot Test | Controllers, Security |
| **Frontend Tests** | Jest + React Testing Library | Components, Hooks |
| **E2E Tests** | Cypress (planificado) | Flujos críticos |

### **Code Quality**

- **Backend**: SonarQube, Checkstyle, SpotBugs
- **Frontend**: ESLint, TypeScript strict mode, SonarLint
- **Database**: Flyway migrations, constraints FK
- **Security**: OWASP dependency check, JWT best practices

---

## **🚀 Deployment y Infraestructura**

### **Ambientes**

| Ambiente | Base de Datos | URL | Características |
|----------|---------------|-----|-----------------|
| **Development** | MySQL local | localhost:3000/8080 | Hot reload, debug logs |
| **Staging** | MySQL Cloud | staging.impulse.app | Datos de prueba |
| **Production** | MySQL RDS | impulse.app | SSL, CDN, monitoring |

### **Contenarización (Docker)**

```dockerfile
# Backend
FROM openjdk:21-jre-slim
COPY target/impulse-backend.jar app.jar
EXPOSE 8080
CMD ["java", "-jar", "app.jar"]

# Frontend  
FROM nginx:alpine
COPY build/ /usr/share/nginx/html/
EXPOSE 80
```

### **CI/CD Pipeline**

```yaml
# GitHub Actions / Jenkins
1. Trigger: Push to main branch
2. Tests: Unit + Integration
3. Build: Maven + npm build  
4. Security: Dependency scan
5. Deploy: Docker containers
6. Smoke tests: Health checks
```

---

## **📊 Monitoreo y Observabilidad**

### **Métricas de Negocio**
- Usuarios activos diarios/mensuales
- Retos creados/completados por período
- Tasa de validación de evidencias
- Tiempo promedio de completar retos

### **Métricas Técnicas**
- Response time API endpoints
- Throughput (requests/second)
- Error rate por endpoint
- Uso de CPU/memoria/disco

### **Logging**
```java
// Backend: Logback + structured logging
Logger.info("Reto creado", 
  kv("userId", userId),
  kv("retoId", retoId),
  kv("categoria", categoria)
);

// Frontend: Console + error reporting
console.error('API Error:', { endpoint, error, userId });
```

---

## **🔮 Roadmap Técnico**

### **Próximas Implementaciones**
1. **Notificaciones push**: Service Workers + Firebase
2. **Chat en tiempo real**: WebSockets + Socket.io
3. **App móvil**: React Native compartiendo lógica
4. **Analytics avanzados**: Integración con Google Analytics 4
5. **Machine Learning**: Recomendaciones de retos personalizados

### **Optimizaciones Planificadas**
1. **Caching**: Redis para sesiones y datos frecuentes
2. **CDN**: Assets estáticos en CloudFront
3. **Database**: Índices optimizados, query performance
4. **Security**: Rate limiting, WAF, penetration testing

---

## **🛡️ Consideraciones de Seguridad**

### **Vulnerabilidades Mitigadas**
- **XSS**: Content Security Policy, sanitización
- **CSRF**: SameSite cookies, tokens CSRF
- **SQL Injection**: Prepared statements, JPA
- **JWT Attacks**: Secret rotation, expiration times
- **File Upload**: Validación tipo/tamaño, storage seguro

### **Compliance**
- **GDPR**: Exportación/eliminación de datos usuario
- **Accessibility**: WCAG 2.1 AA compliance
- **Privacy**: Encriptación datos sensibles, audit trails

---

## **📈 Métricas de Performance**

### **Frontend (Core Web Vitals)**
- **LCP** (Largest Contentful Paint): < 2.5s
- **FID** (First Input Delay): < 100ms  
- **CLS** (Cumulative Layout Shift): < 0.1
- **Bundle size**: < 500KB gzipped

### **Backend (SLA targets)**
- **API Response time**: p95 < 200ms
- **Availability**: 99.9% uptime
- **Database queries**: < 50ms average
- **Concurrent users**: 1000+ supported

---

## **🎯 PLAN DE IMPLEMENTACIÓN: NAVEGACIÓN SEGURA Y ROBUSTA**

## **Bloque 1 — Frontend (React + TypeScript)**

### **Objetivo general**
Construir una navegación fiable, segura y predecible que:
- haga alcanzables por URL todas las pantallas (incluido refresh directo)
- garantice un botón "Atrás" coherente en cualquier punto (sin "encierros")
- preserve estado relevante en la URL (filtros, paginación, pestañas)
- soporte deep links (internos y desde notificaciones externas)
- respete privacidad y roles
- cumpla accesibilidad y seguridad en cliente

### **Condiciones innegociables**
- Nada de JWT en localStorage/sessionStorage. La sesión viaja en cookies HttpOnly.
- Cero PII ni secretos en la URL (incluye query params).
- Rutas canónicas y estables (no dependas de IDs opacos visibles si comprometen privacidad).
- Privacidad por diseño:
  - Si el recurso es privado y el usuario no tiene acceso: mostrar 404 (evita enumeración).
  - Si el recurso no es privado pero el usuario carece de permiso: 403.
- Deep link: si el usuario no está autenticado, redirigir a /login?continue=<destino> y, tras login, navegar con replace para que "Atrás" no vuelva al login.
- Back coherente: si no hay historial (entrada directa), "Atrás" cae a un fallback sano (Dashboard).
- Estado = URL: todo filtro/paginación/orden/pestaña de listas debe persistir en la URL y restaurarse al volver/recargar.

### **Requisitos funcionales de navegación**
- Públicas: Home, Login, Register, Onboarding.
- Privadas (auth): Dashboard, Mis Retos, Crear Reto (wizard), Reto Detalle (+ sub-vistas), Perfil, Configuración, Notificaciones.
- Rol: Validaciones (VALIDADOR), Validadores (según rol).
- Errores dedicados: 403, 404 con CTA claro para salir (p. ej., "Volver al Dashboard").
- Modales basados en navegación: cuando se abra una vista en modal (p. ej., previsualización de evidencia), el back debe cerrar el modal y regresar a la pantalla base, no a una página anterior irrelevante.
- Wizards: al completar, navegar con replace al destino final para no acumular pasos en el historial.

### **Seguridad en cliente**
- CSRF: el cliente incluye cookies en todas las llamadas y, en métodos mutadores, envía el token CSRF en header (doble cookie).
- CORS: el cliente no asume *; debe funcionar con allowlist estricta.
- CSP: no depender de eval/inline scripts no permitidos; respetar una CSP estricta (solo 'self', data: para imágenes si es imprescindible).
- Uploads: nunca renderizar HTML no confiable; previsualizaciones seguras; no ejecutar contenido activo.

### **Accesibilidad y UX**
- Gestión de foco al cambiar de vista (llevar foco al h1 o contenedor principal).
- Restauración de scroll por ruta.
- Breadcrumbs o equivalente para "salir" de niveles profundos sin depender del navegador.
- Mensajería clara en 403/404 con acciones sugeridas.
- Estados vacíos consistentes (sin duda sobre qué hacer).
- i18n: textos navegacionales y errores localizados.

### **Rendimiento y resiliencia**
- Transiciones rápidas; evita recargas innecesarias de datos al navegar entre sub-vistas del mismo recurso.
- Prefetch oportuno (datos del detalle al pasar desde la lista, si no penaliza).
- Fallback offline/errores controlados (no pantallas en blanco).

### **Casos límite a cubrir**
- Entrar por URL profunda sin sesión (login → continuar).
- Entrar por URL a un recurso privado de otro usuario (debe resultar en 404).
- Abrir modal por URL (copiable/compartible) y cerrarlo con "Atrás".
- Cambiar filtros/orden y recargar: el estado debe restaurarse igual.
- Navegar desde notificación externa (sin historial) y luego pulsar "Atrás" → fallback.
- Cambiar de rol (p. ej., sesión de validador) y acceder a rutas restringidas.

### **Criterios de aceptación (Frontend)**
- Deep links: 100% de rutas privadas redirigen a login con continue; tras login se regresa al destino con replace.
- Back seguro: en detalles y modales, "Atrás" vuelve a la base o al fallback si no hay historial.
- URL-estado: filtros, paginación y vista se preservan navegando y al volver.
- Privacidad: 404 para recursos privados ajenos; 403 para "no autorizado" en públicos restringidos.
- Accesibilidad: foco y scroll gestionados; 403/404 accesibles y navegables.
- E2E: cobertura de públicas, privadas, rol, deep link sin historial, modales, 403/404, y persistencia de filtros.

## **Bloque 2 — Backend (Spring Boot + Java, MySQL 8)**

### **Objetivo general**
Proveer puntos de control de seguridad y contexto para que la navegación del frontend:
- resuelva autenticación con cookies HttpOnly y CSRF
- aplique autorización de objeto (OBO) para Reto/Evidencia
- soporte deep links seguros desde notificaciones
- entregue códigos de error coherentes (404/403)
- y cumpla OWASP/GDPR/ENS/ISO en lo que afecta a navegación y exposición de datos

### **Condiciones innegociables**
- Autenticación por cookies:
  - IMPULSE_TOKEN (acceso corto, HttpOnly+Secure+SameSite)
  - IMPULSE_REFRESH (rotativa, HttpOnly+Secure+SameSite, "one per use")
- CSRF habilitado con doble cookie (emites XSRF-TOKEN no-HttpOnly; exiges X-XSRF-TOKEN en mutadores).
- CORS allowlist (dominios exactos; credenciales habilitadas).
- Headers de seguridad: CSP estricta, HSTS, Referrer-Policy, X-Content-Type-Options, frame-ancestors 'none', Permissions-Policy mínima.
- Sin tokens en URLs; nada de JWT/credenciales en query strings.
- Errores homogéneos; sin stacktrace ni filtrado de detalles internos.

### **Reglas de autorización (OBO)**
- Reto/Evidencia – Ver: dueño o validador asignado.
- Reto/Evidencia – Editar: dueño (o ADMIN según política).
- Privado sin acceso → 404 (evita enumeración).
- No privado sin permiso → 403.
- Endpoints de listas filtran por permisos efectivos (no revelar conteos que delaten existencia).

### **Deep links seguros**
- Las URLs públicas (ej.: /reto/:id) no llevan secretos.
- Para notificaciones externas que precisan contexto, usa código efímero de un uso (servidor resuelve y redirige a la ruta interna).
- Todo deep link resuelto deja traza de auditoría (quién, qué, cuándo).

### **Integridad y privacidad**
- No logging de PII sensible en rutas de navegación; token/cookies jamás en logs.
- Trazabilidad de decisiones (validaciones ✔️/❌, acceso a evidencias) con IDs internos.
- Política de 404/403 aplicada de forma consistente en todos los controladores.
- Rate limiting en endpoints de autenticación y rutas calientes.

### **Rendimiento y estabilidad**
- p95 < 200ms en endpoints de lectura usados por navegación.
- Paginación predeterminada en listados.
- Cache-Control sensato en recursos estáticos y no sensibles (lado reverse proxy).
- Mensajes de error cortos, consistentes, versionados.

### **Casos límite a cubrir**
- Refresh de token caducado sin perder el continue del flujo.
- Acceso a recurso borrado (404, sin filtrar si existió o no).
- Cambio de rol y acceso a rutas restringidas.
- Concurrente: edición/validación mientras otro usuario consulta (coherencia de estados).
- Uploads maliciosos (rechazo, auditoría, sin fuga de detalles).

### **Criterios de aceptación (Backend)**
- Auth: login emite cookies; refresh rota; logout revoca; todo stateless.
- CSRF: mutadores sin token → 403; con token → OK.
- CORS/Headers: configuración estricta; sin wildcard con credenciales.
- OBO: reglas aplicadas de forma uniforme (tests de acceso positivo y negativo).
- Errores: 404/403 correctos según privacidad; formato uniforme; sin stacktrace.
- Deep link: códigos efímeros (un uso, expiración corta) y auditoría.
- Observabilidad: métricas y logs estructurados sin PII sensible.

### **No-objetivos (para que no haya ambigüedad)**
- No se permiten tokens en cliente fuera de cookies HttpOnly.
- No se liberan endpoints "atajo" que salten OBO/CSRF/CORS.
- No se exponen IDs sensibles si comprometen privacidad del modelo.
- No se aceptan respuestas ambiguas (deben mapearse a 403/404 claras).

### **Señales de éxito (cómo sabremos que está bien)**
- Cualquier URL compartida de una pantalla abre exactamente esa pantalla tras login, con su estado intacto.
- El usuario nunca queda atrapado en un modal o flujo; "Atrás" siempre tiene salida segura.
- No hay fugas de existencia de recursos privados (404 consistente).
- Ningún test E2E de navegación falla al variar rol/sesión/deep link.
- ZAP/DAST sin hallazgos críticos en rutas de navegación.

### **Qué esperamos de Copilot**
- Elegir y aplicar el mejor patrón de implementación disponible en el stack actual sin alterar la estructura de proyecto.
- Autocompletar y generar el código necesario respetando estas condiciones y criterios de aceptación.
- Propagar estas reglas de seguridad y UX a todas las rutas existentes y futuras.
- Mantener la solución autoexplicable (nombres claros, comentarios breves donde añada valor) y alineada con el manual.

---

Esta documentación proporciona una visión completa de **IMPULSE** desde perspectiva técnica, cubriendo arquitectura, implementación, configuración y consideraciones operacionales, además del plan detallado para implementar navegación segura y robusta según los más altos estándares de seguridad y UX.
